From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: loqqin <secret@secret.com>
Date: Sun, 24 Nov 2024 22:32:33 +0200
Subject: [PATCH] FIRST CUSTOM COMMIT


diff --git a/build.gradle.kts b/build.gradle.kts
index e29e5024fa693baae469d47fe77b57118f14627c..4c84b9ce847efeef0423d716bc6fa359345d5d30 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -90,6 +90,9 @@ dependencies {
     testImplementation("org.mockito:mockito-core:5.14.1")
     testImplementation("org.ow2.asm:asm-tree:9.7.1")
     mockitoAgent("org.mockito:mockito-core:5.14.1") { isTransitive = false } // Paper - configure mockito agent that is needed in newer java versions
+
+    compileOnly(files("/home/user/Desktop/pppppppppppp/build/libs/paper-bundler-1.21.3-R0.1-SNAPSHOT-mojmap/META-INF/versions/1.21.3/paper-1.21.3.jar"))
+
 }
 
 // Paper start
diff --git a/src/main/java/org/bukkit/inventory/EntityEquipment.java b/src/main/java/org/bukkit/inventory/EntityEquipment.java
index 91cd0a918b640df7e75f6e40f3c6bd3689d4ff40..66f437b27b5ed4c12c3045586e5a61b97e158a9a 100644
--- a/src/main/java/org/bukkit/inventory/EntityEquipment.java
+++ b/src/main/java/org/bukkit/inventory/EntityEquipment.java
@@ -1,5 +1,6 @@
 package org.bukkit.inventory;
 
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Mob;
 import org.jetbrains.annotations.NotNull;
diff --git a/src/main/java/org/bukkit/inventory/Inventory.java b/src/main/java/org/bukkit/inventory/Inventory.java
index 0d519813c12d98b28d62e6d01d7ec6e8c2dba3c3..0b4cf7cf653d4d77eedd3ce26851ba7afe99067b 100644
--- a/src/main/java/org/bukkit/inventory/Inventory.java
+++ b/src/main/java/org/bukkit/inventory/Inventory.java
@@ -5,7 +5,9 @@ import java.util.List;
 import java.util.ListIterator;
 import org.bukkit.Location;
 import org.bukkit.Material;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Item;
 import org.bukkit.event.inventory.InventoryType;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
@@ -66,7 +68,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @return The ItemStack in the slot
      */
     @Nullable
-    public ItemStack getItem(int index);
+    public CraftItemStack getItem(int index);
 
     /**
      * Stores the ItemStack at the given index of the inventory.
@@ -161,7 +163,7 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @return An array of ItemStacks from the inventory. Individual items may be null.
      */
-    public @Nullable ItemStack @NotNull [] getContents(); // Paper - make array elements nullable instead array
+    public @Nullable CraftItemStack @NotNull [] getContents(); // Paper - make array elements nullable instead array
 
     /**
      * Completely replaces the inventory's contents. Removes all existing
@@ -185,7 +187,7 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @return inventory storage contents. Individual items may be null.
      */
-    public @Nullable ItemStack @NotNull [] getStorageContents(); // Paper - make array elements nullable instead array
+    public @Nullable CraftItemStack @NotNull [] getStorageContents(); // Paper - make array elements nullable instead array
 
     /**
      * Put the given ItemStacks into the storage slots
@@ -273,7 +275,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @throws IllegalArgumentException if material is null
      */
     @NotNull
-    public HashMap<Integer, ? extends ItemStack> all(@NotNull Material material) throws IllegalArgumentException;
+    public HashMap<Integer, ? extends CraftItemStack> all(@NotNull Material material) throws IllegalArgumentException;
 
     /**
      * Finds all slots in the inventory containing any ItemStacks with the
@@ -288,7 +290,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @return A map from slot indexes to item at index
      */
     @NotNull
-    public HashMap<Integer, ? extends ItemStack> all(@Nullable ItemStack item);
+    public HashMap<Integer, ? extends CraftItemStack> all(@Nullable ItemStack item);
 
     /**
      * Finds the first slot in the inventory containing an ItemStack with the
@@ -308,7 +310,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @param item The ItemStack to match against
      * @return The slot index of the given ItemStack or -1 if not found
      */
-    public int first(@NotNull ItemStack item);
+    public int first(@NotNull CraftItemStack item);
 
     /**
      * Returns the first empty Slot.
@@ -341,7 +343,7 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @param item The ItemStack to match against
      */
-    public void remove(@NotNull ItemStack item);
+    public void remove(@NotNull CraftItemStack item);
 
     /**
      * Clears out a particular slot in the index.
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 6e4ca7d95953a25c0aaafd35e54ef9254a1b5f0b..b14a33dae784fb5e055edccfd426bdfffdafa3a7 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -2,10 +2,14 @@ package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap;
+import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.Locale;
 import java.util.Map;
+import java.util.UUID;
+import net.kyori.adventure.text.Component;
 import org.bukkit.Bukkit;
+import org.bukkit.Color;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
@@ -13,10 +17,15 @@ import org.bukkit.Translatable;
 import org.bukkit.UndefinedNullability;
 import org.bukkit.Utility;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer;
 import org.bukkit.enchantments.Enchantment;
+import org.bukkit.inventory.meta.ColorableArmorMeta;
 import org.bukkit.inventory.meta.Damageable;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.material.MaterialData;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.bukkit.persistence.PersistentDataType;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -226,8 +235,9 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
      *
      * @param amount New amount of items in this stack
      */
-    public void setAmount(int amount) {
+    public ItemStack setAmount(int amount) {
         this.craftDelegate.setAmount(amount); // Paper - delegate
+        return this;
     }
 
     /**
@@ -588,7 +598,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
      * @param consumer the meta consumer
      * @return {@code true} if the edit was successful, {@code false} otherwise
      */
-    public boolean editMeta(final @NotNull java.util.function.Consumer<? super ItemMeta> consumer) {
+    public ItemStack editMeta(final @NotNull java.util.function.Consumer<? super ItemMeta> consumer) {
         return editMeta(ItemMeta.class, consumer);
     }
 
@@ -607,14 +617,14 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
      * @param <M> the meta type
      * @return {@code true} if the edit was successful, {@code false} otherwise
      */
-    public <M extends ItemMeta> boolean editMeta(final @NotNull Class<M> metaClass, final @NotNull java.util.function.Consumer<@NotNull ? super M> consumer) {
+    public <M extends ItemMeta> ItemStack editMeta(final @NotNull Class<M> metaClass, final @NotNull java.util.function.Consumer<@NotNull ? super M> consumer) {
         final @Nullable ItemMeta meta = this.getItemMeta();
         if (metaClass.isInstance(meta)) {
             consumer.accept((M) meta);
             this.setItemMeta(meta);
-            return true;
+            return this;
         }
-        return false;
+        return this;
     }
     // Paper end
 
@@ -979,13 +989,14 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
      *
      * @param lore the lore that will be set
      */
-    public void lore(@Nullable java.util.List<? extends net.kyori.adventure.text.Component> lore) {
+    public ItemStack lore(@Nullable java.util.List<? extends net.kyori.adventure.text.Component> lore) {
         ItemMeta itemMeta = getItemMeta();
         if (itemMeta == null) {
             throw new IllegalStateException("Cannot set lore on " + getType());
         }
         itemMeta.lore(lore);
         this.setItemMeta(itemMeta);
+        return this;
     }
 
     /**
@@ -1318,4 +1329,148 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
         return this.craftDelegate.matchesWithoutData(item, excludeTypes, ignoreCount);
     }
     // Paper end - data component API
+
+        public String name() {
+                final ItemMeta itemMeta = getItemMeta();
+                if (itemMeta == null) {
+                        return "null";
+                    } else {
+                        return itemMeta.getDisplayName();
+                    }
+            }
+
+
+        public boolean nameEquals(ItemStack itemStack) {
+                return getItemMeta().getDisplayName().equals(itemStack.getItemMeta().getDisplayName());
+            }
+
+        public boolean hasUUID() {
+                return getItemMeta().getPersistentDataContainer().has(new NamespacedKey("space", "uuid"));
+            }
+
+        public static boolean equals(ItemStack itemStack, ItemStack itemStack1) {
+                if (itemStack == null && itemStack1 == null) {
+                        return true;
+                    }
+                if (itemStack1 == null || itemStack == null) {
+                        return false;
+                    }
+                return itemStack.equals(itemStack1);
+            }
+
+        public boolean materialEquals(Material material) {
+                return material == getType();
+            }
+
+        public static boolean nullOrAir(ItemStack itemStack) {
+                return itemStack == null || itemStack.getType().isAir();
+            }
+
+        public ItemStack setName(String name) {
+                return editMeta(meta -> meta.displayName(Component.text(name)));
+            }
+
+        public ItemStack setLore(String[] lore) {
+                return editMeta(meta -> meta.setLore(Arrays.asList(lore)));
+            }
+
+        public ItemStack setUnbreakable() {
+                return editMeta(meta -> {
+                        meta.setUnbreakable(true);
+                        meta.addItemFlags(ItemFlag.HIDE_UNBREAKABLE);
+                    });
+            }
+
+        public ItemStack nameAndLore(String name, String[] lore) {
+                return editMeta(meta -> {
+                        meta.displayName(Component.text(name));
+                        meta.setLore(Arrays.asList(lore));
+                    });
+            }
+
+        public ItemStack setRandomUUID() {
+                return editMeta(meta -> meta.getPersistentDataContainer().set(new NamespacedKey("space", "uuid"), PersistentDataType.STRING, UUID.randomUUID().toString()));
+            }
+
+        public ItemStack setColor(int red, int green, int blue) {
+                return editMeta(meta -> {
+                        ((ColorableArmorMeta) meta).setColor(Color.fromRGB(red, green, blue));
+                        meta.addItemFlags(ItemFlag.HIDE_DYE);
+                    });
+            }
+
+        public static boolean nameEquals(ItemStack first, ItemStack second) {
+                if (first == null && second == null) {
+                        return true;
+                    }
+                if (first == null || second == null) {
+                        return false;
+                    }
+
+                    return first.name().equals(second.name());
+            }
+
+        public String getID() {
+                final ItemMeta itemMeta = getItemMeta();
+                if (itemMeta == null) {
+                        return "";
+                    }
+                return getString("id");
+            }
+
+        public ItemStack setString(String key, String value) {
+                return editMeta(meta -> meta.getPersistentDataContainer().set(new NamespacedKey("space", key.toLowerCase()), PersistentDataType.STRING, value));
+            }
+
+        public CraftPersistentDataContainer getCompound(String key) {
+                final ItemMeta itemMeta = getItemMeta();
+                if (itemMeta == null) {
+                        return null;
+                    }
+                return (CraftPersistentDataContainer) itemMeta.getPersistentDataContainer().get(new NamespacedKey("space", key.toLowerCase()), PersistentDataType.TAG_CONTAINER);
+            }
+
+        public ItemStack setCompound(String key, PersistentDataContainer container) {
+                return editMeta(meta -> meta.getPersistentDataContainer().set(new NamespacedKey("space", key.toLowerCase()), PersistentDataType.TAG_CONTAINER, container));
+            }
+
+        public ItemStack setGlinting() {
+                return editMeta(meta -> meta.setEnchantmentGlintOverride(true));
+            }
+
+        public ItemStack hideTooltip() {
+                return editMeta(meta -> meta.setHideTooltip(true));
+            }
+
+        public ItemStack setDouble(String key, double value) {
+                return editMeta(meta -> meta.getPersistentDataContainer().set(new NamespacedKey("space", key.toLowerCase()), PersistentDataType.DOUBLE, value));
+            }
+
+        public ItemStack setInt(String key, int value) {
+                return editMeta(meta -> meta.getPersistentDataContainer().set(new NamespacedKey("space", key.toLowerCase()), PersistentDataType.INTEGER, value));
+            }
+
+        public String getString(String key) {
+                final String space = getItemMeta().getPersistentDataContainer().get(new NamespacedKey("space", key.toLowerCase()), PersistentDataType.STRING);
+                if (space == null) {
+                        return "";
+                    }
+                return space;
+            }
+
+        public int getInt(String key) {
+                final Integer space = getItemMeta().getPersistentDataContainer().get(new NamespacedKey("space", key.toLowerCase()), PersistentDataType.INTEGER);
+                if (space == null) {
+                        return 0;
+                    }
+                return space;
+            }
+
+        public double getDouble(String key) {
+                final Double space = getItemMeta().getPersistentDataContainer().get(new NamespacedKey("space", key.toLowerCase()), PersistentDataType.DOUBLE);
+                if (space == null) {
+                        return 0.0;
+                    }
+                return space;
+            }
 }
diff --git a/src/main/java/org/bukkit/inventory/PlayerInventory.java b/src/main/java/org/bukkit/inventory/PlayerInventory.java
index bcfcf963063e7c0fdc711febef2df2d0ff12776d..d77f9e744867c6d6c924af12a832d0cd596536d1 100644
--- a/src/main/java/org/bukkit/inventory/PlayerInventory.java
+++ b/src/main/java/org/bukkit/inventory/PlayerInventory.java
@@ -1,5 +1,6 @@
 package org.bukkit.inventory;
 
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.HumanEntity;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -16,7 +17,7 @@ public interface PlayerInventory extends Inventory {
      * null and are returned in a fixed order starting from the boots and going
      * up to the helmet
      */
-    public @Nullable ItemStack @NotNull [] getArmorContents(); // Paper - make array elements nullable instead array
+    public @Nullable CraftItemStack @NotNull [] getArmorContents(); // Paper - make array elements nullable instead array
 
     /**
      * Get all additional ItemStacks stored in this inventory.
@@ -35,7 +36,7 @@ public interface PlayerInventory extends Inventory {
      * @return The ItemStack in the helmet slot
      */
     @Nullable
-    public ItemStack getHelmet();
+    public CraftItemStack getHelmet();
 
     /**
      * Return the ItemStack from the chestplate slot
@@ -43,7 +44,7 @@ public interface PlayerInventory extends Inventory {
      * @return The ItemStack in the chestplate slot
      */
     @Nullable
-    public ItemStack getChestplate();
+    public CraftItemStack getChestplate();
 
     /**
      * Return the ItemStack from the leg slot
@@ -51,7 +52,7 @@ public interface PlayerInventory extends Inventory {
      * @return The ItemStack in the leg slot
      */
     @Nullable
-    public ItemStack getLeggings();
+    public CraftItemStack getLeggings();
 
     /**
      * Return the ItemStack from the boots slot
@@ -59,7 +60,7 @@ public interface PlayerInventory extends Inventory {
      * @return The ItemStack in the boots slot
      */
     @Nullable
-    public ItemStack getBoots();
+    public CraftItemStack getBoots();
 
     /**
      * Stores the ItemStack at the given index of the inventory.
@@ -168,7 +169,7 @@ public interface PlayerInventory extends Inventory {
      * @return the currently held item
      */
     @NotNull
-    ItemStack getItemInMainHand();
+    CraftItemStack getItemInMainHand();
 
     /**
      * Sets the item the player is holding in their main hand.
@@ -184,7 +185,7 @@ public interface PlayerInventory extends Inventory {
      * @return the currently held item
      */
     @NotNull
-    ItemStack getItemInOffHand();
+    CraftItemStack getItemInOffHand();
 
     /**
      * Sets the item the player is holding in their off hand.
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
index 0f40eb52f6e2a5b6932cf9f223c1bbe9ab9eab1b..c5d5cecc5b7a07e7b84c9bbe90863fc28d08cef8 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
@@ -71,4 +71,40 @@ public interface PersistentDataContainer extends io.papermc.paper.persistence.Pe
         this.readFromBytes(bytes, true);
     }
     // Paper end - byte array serialization
+
+        default Integer getInt(String key) {
+                final Integer space = get(new NamespacedKey("space", key.toLowerCase()), PersistentDataType.INTEGER);
+                if (space == null) {
+                        return 0;
+                    }
+                return space;
+            }
+
+        default void setInt(String key, int value) {
+                set(new NamespacedKey("space", key.toLowerCase()), PersistentDataType.INTEGER, value);
+            }
+
+        default String getString(String key) {
+                final String space = get(new NamespacedKey("space", key.toLowerCase()), PersistentDataType.STRING);
+                if (space == null) {
+                        return "";
+                    }
+                return space;
+            }
+
+        default void setString(String key, String value) {
+                set(new NamespacedKey("space", key.toLowerCase()), PersistentDataType.STRING, value);
+            }
+
+        default Double getDouble(String key) {
+                final Double space = get(new NamespacedKey("space", key.toLowerCase()), PersistentDataType.DOUBLE);
+                if (space == null) {
+                        return 0.0;
+                    }
+                return space;
+            }
+
+        default void setDouble(String key, Double value) {
+                set(new NamespacedKey("space", key.toLowerCase()), PersistentDataType.DOUBLE, value);
+            }
 }
